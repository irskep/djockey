var e=Object.create;var{getPrototypeOf:GG,defineProperty:m,getOwnPropertyNames:QG}=Object;var UG=Object.prototype.hasOwnProperty;var XG=(Q,G,U)=>{U=Q!=null?e(GG(Q)):{};const X=G||!Q||!Q.__esModule?m(U,"default",{value:Q,enumerable:!0}):U;for(let Y of QG(Q))if(!UG.call(X,Y))m(X,Y,{get:()=>Q[Y],enumerable:!0});return X};var YG=(Q,G)=>()=>(G||Q((G={exports:{}}).exports,G),G.exports);var s=YG((u,d)=>{(function(){var Q=function(G){var U=new Q.Builder;return U.pipeline.add(Q.trimmer,Q.stopWordFilter,Q.stemmer),U.searchPipeline.add(Q.stemmer),G.call(U,U),U.build()};Q.version="2.3.9";/*!
   * lunr.utils
   * Copyright (C) 2020 Oliver Nightingale
   */Q.utils={},Q.utils.warn=function(G){return function(U){if(G.console&&console.warn)console.warn(U)}}(this),Q.utils.asString=function(G){if(G===void 0||G===null)return"";else return G.toString()},Q.utils.clone=function(G){if(G===null||G===void 0)return G;var U=Object.create(null),X=Object.keys(G);for(var Y=0;Y<X.length;Y++){var Z=X[Y],$=G[Z];if(Array.isArray($)){U[Z]=$.slice();continue}if(typeof $==="string"||typeof $==="number"||typeof $==="boolean"){U[Z]=$;continue}throw new TypeError("clone is not deep and does not support nested objects")}return U},Q.FieldRef=function(G,U,X){this.docRef=G,this.fieldName=U,this._stringValue=X},Q.FieldRef.joiner="/",Q.FieldRef.fromString=function(G){var U=G.indexOf(Q.FieldRef.joiner);if(U===-1)throw"malformed field ref string";var X=G.slice(0,U),Y=G.slice(U+1);return new Q.FieldRef(Y,X,G)},Q.FieldRef.prototype.toString=function(){if(this._stringValue==null)this._stringValue=this.fieldName+Q.FieldRef.joiner+this.docRef;return this._stringValue};/*!
   * lunr.Set
   * Copyright (C) 2020 Oliver Nightingale
   */Q.Set=function(G){if(this.elements=Object.create(null),G){this.length=G.length;for(var U=0;U<this.length;U++)this.elements[G[U]]=!0}else this.length=0},Q.Set.complete={intersect:function(G){return G},union:function(){return this},contains:function(){return!0}},Q.Set.empty={intersect:function(){return this},union:function(G){return G},contains:function(){return!1}},Q.Set.prototype.contains=function(G){return!!this.elements[G]},Q.Set.prototype.intersect=function(G){var U,X,Y,Z=[];if(G===Q.Set.complete)return this;if(G===Q.Set.empty)return G;if(this.length<G.length)U=this,X=G;else U=G,X=this;Y=Object.keys(U.elements);for(var $=0;$<Y.length;$++){var A=Y[$];if(A in X.elements)Z.push(A)}return new Q.Set(Z)},Q.Set.prototype.union=function(G){if(G===Q.Set.complete)return Q.Set.complete;if(G===Q.Set.empty)return this;return new Q.Set(Object.keys(this.elements).concat(Object.keys(G.elements)))},Q.idf=function(G,U){var X=0;for(var Y in G){if(Y=="_index")continue;X+=Object.keys(G[Y]).length}var Z=(U-X+0.5)/(X+0.5);return Math.log(1+Math.abs(Z))},Q.Token=function(G,U){this.str=G||"",this.metadata=U||{}},Q.Token.prototype.toString=function(){return this.str},Q.Token.prototype.update=function(G){return this.str=G(this.str,this.metadata),this},Q.Token.prototype.clone=function(G){return G=G||function(U){return U},new Q.Token(G(this.str,this.metadata),this.metadata)};/*!
   * lunr.tokenizer
   * Copyright (C) 2020 Oliver Nightingale
   */Q.tokenizer=function(G,U){if(G==null||G==null)return[];if(Array.isArray(G))return G.map(function(D){return new Q.Token(Q.utils.asString(D).toLowerCase(),Q.utils.clone(U))});var X=G.toString().toLowerCase(),Y=X.length,Z=[];for(var $=0,A=0;$<=Y;$++){var O=X.charAt($),J=$-A;if(O.match(Q.tokenizer.separator)||$==Y){if(J>0){var z=Q.utils.clone(U)||{};z.position=[A,J],z.index=Z.length,Z.push(new Q.Token(X.slice(A,$),z))}A=$+1}}return Z},Q.tokenizer.separator=/[\s\-]+/;/*!
   * lunr.Pipeline
   * Copyright (C) 2020 Oliver Nightingale
   */Q.Pipeline=function(){this._stack=[]},Q.Pipeline.registeredFunctions=Object.create(null),Q.Pipeline.registerFunction=function(G,U){if(U in this.registeredFunctions)Q.utils.warn("Overwriting existing registered function: "+U);G.label=U,Q.Pipeline.registeredFunctions[G.label]=G},Q.Pipeline.warnIfFunctionNotRegistered=function(G){var U=G.label&&G.label in this.registeredFunctions;if(!U)Q.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",G)},Q.Pipeline.load=function(G){var U=new Q.Pipeline;return G.forEach(function(X){var Y=Q.Pipeline.registeredFunctions[X];if(Y)U.add(Y);else throw new Error("Cannot load unregistered function: "+X)}),U},Q.Pipeline.prototype.add=function(){var G=Array.prototype.slice.call(arguments);G.forEach(function(U){Q.Pipeline.warnIfFunctionNotRegistered(U),this._stack.push(U)},this)},Q.Pipeline.prototype.after=function(G,U){Q.Pipeline.warnIfFunctionNotRegistered(U);var X=this._stack.indexOf(G);if(X==-1)throw new Error("Cannot find existingFn");X=X+1,this._stack.splice(X,0,U)},Q.Pipeline.prototype.before=function(G,U){Q.Pipeline.warnIfFunctionNotRegistered(U);var X=this._stack.indexOf(G);if(X==-1)throw new Error("Cannot find existingFn");this._stack.splice(X,0,U)},Q.Pipeline.prototype.remove=function(G){var U=this._stack.indexOf(G);if(U==-1)return;this._stack.splice(U,1)},Q.Pipeline.prototype.run=function(G){var U=this._stack.length;for(var X=0;X<U;X++){var Y=this._stack[X],Z=[];for(var $=0;$<G.length;$++){var A=Y(G[$],$,G);if(A===null||A===void 0||A==="")continue;if(Array.isArray(A))for(var O=0;O<A.length;O++)Z.push(A[O]);else Z.push(A)}G=Z}return G},Q.Pipeline.prototype.runString=function(G,U){var X=new Q.Token(G,U);return this.run([X]).map(function(Y){return Y.toString()})},Q.Pipeline.prototype.reset=function(){this._stack=[]},Q.Pipeline.prototype.toJSON=function(){return this._stack.map(function(G){return Q.Pipeline.warnIfFunctionNotRegistered(G),G.label})};/*!
   * lunr.Vector
   * Copyright (C) 2020 Oliver Nightingale
   */Q.Vector=function(G){this._magnitude=0,this.elements=G||[]},Q.Vector.prototype.positionForIndex=function(G){if(this.elements.length==0)return 0;var U=0,X=this.elements.length/2,Y=X-U,Z=Math.floor(Y/2),$=this.elements[Z*2];while(Y>1){if($<G)U=Z;if($>G)X=Z;if($==G)break;Y=X-U,Z=U+Math.floor(Y/2),$=this.elements[Z*2]}if($==G)return Z*2;if($>G)return Z*2;if($<G)return(Z+1)*2},Q.Vector.prototype.insert=function(G,U){this.upsert(G,U,function(){throw"duplicate index"})},Q.Vector.prototype.upsert=function(G,U,X){this._magnitude=0;var Y=this.positionForIndex(G);if(this.elements[Y]==G)this.elements[Y+1]=X(this.elements[Y+1],U);else this.elements.splice(Y,0,G,U)},Q.Vector.prototype.magnitude=function(){if(this._magnitude)return this._magnitude;var G=0,U=this.elements.length;for(var X=1;X<U;X+=2){var Y=this.elements[X];G+=Y*Y}return this._magnitude=Math.sqrt(G)},Q.Vector.prototype.dot=function(G){var U=0,X=this.elements,Y=G.elements,Z=X.length,$=Y.length,A=0,O=0,J=0,z=0;while(J<Z&&z<$)if(A=X[J],O=Y[z],A<O)J+=2;else if(A>O)z+=2;else if(A==O)U+=X[J+1]*Y[z+1],J+=2,z+=2;return U},Q.Vector.prototype.similarity=function(G){return this.dot(G)/this.magnitude()||0},Q.Vector.prototype.toArray=function(){var G=new Array(this.elements.length/2);for(var U=1,X=0;U<this.elements.length;U+=2,X++)G[X]=this.elements[U];return G},Q.Vector.prototype.toJSON=function(){return this.elements};/*!
   * lunr.stemmer
   * Copyright (C) 2020 Oliver Nightingale
   * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt
   */Q.stemmer=function(){var G={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},U={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},X="[^aeiou]",Y="[aeiouy]",Z=X+"[^aeiouy]*",$=Y+"[aeiou]*",A="^("+Z+")?"+$+Z,O="^("+Z+")?"+$+Z+"("+$+")?$",J="^("+Z+")?"+$+Z+$+Z,z="^("+Z+")?"+Y,D=new RegExp(A),C=new RegExp(J),T=new RegExp(O),P=new RegExp(z),F=/^(.+?)(ss|i)es$/,W=/^(.+?)([^s])s$/,K=/^(.+?)eed$/,L=/^(.+?)(ed|ing)$/,v=/.$/,j=/(at|bl|iz)$/,R=new RegExp("([^aeiouylsz])\\1$"),g=new RegExp("^"+Z+Y+"[^aeiouwxy]$"),b=/^(.+?[^aeiou])y$/,p=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,h=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,k=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,x=/^(.+?)(s|t)(ion)$/,q=/^(.+?)e$/,c=/ll$/,f=new RegExp("^"+Z+Y+"[^aeiouwxy]$"),w=function N(H){var S,E,I,B,V,M,y;if(H.length<3)return H;if(I=H.substr(0,1),I=="y")H=I.toUpperCase()+H.substr(1);if(B=F,V=W,B.test(H))H=H.replace(B,"$1$2");else if(V.test(H))H=H.replace(V,"$1$2");if(B=K,V=L,B.test(H)){var _=B.exec(H);if(B=D,B.test(_[1]))B=v,H=H.replace(B,"")}else if(V.test(H)){var _=V.exec(H);if(S=_[1],V=P,V.test(S)){if(H=S,V=j,M=R,y=g,V.test(H))H=H+"e";else if(M.test(H))B=v,H=H.replace(B,"");else if(y.test(H))H=H+"e"}}if(B=b,B.test(H)){var _=B.exec(H);S=_[1],H=S+"i"}if(B=p,B.test(H)){var _=B.exec(H);if(S=_[1],E=_[2],B=D,B.test(S))H=S+G[E]}if(B=h,B.test(H)){var _=B.exec(H);if(S=_[1],E=_[2],B=D,B.test(S))H=S+U[E]}if(B=k,V=x,B.test(H)){var _=B.exec(H);if(S=_[1],B=C,B.test(S))H=S}else if(V.test(H)){var _=V.exec(H);if(S=_[1]+_[2],V=C,V.test(S))H=S}if(B=q,B.test(H)){var _=B.exec(H);if(S=_[1],B=C,V=T,M=f,B.test(S)||V.test(S)&&!M.test(S))H=S}if(B=c,V=C,B.test(H)&&V.test(H))B=v,H=H.replace(B,"");if(I=="y")H=I.toLowerCase()+H.substr(1);return H};return function(N){return N.update(w)}}(),Q.Pipeline.registerFunction(Q.stemmer,"stemmer");/*!
   * lunr.stopWordFilter
   * Copyright (C) 2020 Oliver Nightingale
   */Q.generateStopWordFilter=function(G){var U=G.reduce(function(X,Y){return X[Y]=Y,X},{});return function(X){if(X&&U[X.toString()]!==X.toString())return X}},Q.stopWordFilter=Q.generateStopWordFilter(["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your"]),Q.Pipeline.registerFunction(Q.stopWordFilter,"stopWordFilter");/*!
   * lunr.trimmer
   * Copyright (C) 2020 Oliver Nightingale
   */Q.trimmer=function(G){return G.update(function(U){return U.replace(/^\W+/,"").replace(/\W+$/,"")})},Q.Pipeline.registerFunction(Q.trimmer,"trimmer");/*!
   * lunr.TokenSet
   * Copyright (C) 2020 Oliver Nightingale
   */Q.TokenSet=function(){this.final=!1,this.edges={},this.id=Q.TokenSet._nextId,Q.TokenSet._nextId+=1},Q.TokenSet._nextId=1,Q.TokenSet.fromArray=function(G){var U=new Q.TokenSet.Builder;for(var X=0,Y=G.length;X<Y;X++)U.insert(G[X]);return U.finish(),U.root},Q.TokenSet.fromClause=function(G){if("editDistance"in G)return Q.TokenSet.fromFuzzyString(G.term,G.editDistance);else return Q.TokenSet.fromString(G.term)},Q.TokenSet.fromFuzzyString=function(G,U){var X=new Q.TokenSet,Y=[{node:X,editsRemaining:U,str:G}];while(Y.length){var Z=Y.pop();if(Z.str.length>0){var $=Z.str.charAt(0),A;if($ in Z.node.edges)A=Z.node.edges[$];else A=new Q.TokenSet,Z.node.edges[$]=A;if(Z.str.length==1)A.final=!0;Y.push({node:A,editsRemaining:Z.editsRemaining,str:Z.str.slice(1)})}if(Z.editsRemaining==0)continue;if("*"in Z.node.edges)var O=Z.node.edges["*"];else{var O=new Q.TokenSet;Z.node.edges["*"]=O}if(Z.str.length==0)O.final=!0;if(Y.push({node:O,editsRemaining:Z.editsRemaining-1,str:Z.str}),Z.str.length>1)Y.push({node:Z.node,editsRemaining:Z.editsRemaining-1,str:Z.str.slice(1)});if(Z.str.length==1)Z.node.final=!0;if(Z.str.length>=1){if("*"in Z.node.edges)var J=Z.node.edges["*"];else{var J=new Q.TokenSet;Z.node.edges["*"]=J}if(Z.str.length==1)J.final=!0;Y.push({node:J,editsRemaining:Z.editsRemaining-1,str:Z.str.slice(1)})}if(Z.str.length>1){var z=Z.str.charAt(0),D=Z.str.charAt(1),C;if(D in Z.node.edges)C=Z.node.edges[D];else C=new Q.TokenSet,Z.node.edges[D]=C;if(Z.str.length==1)C.final=!0;Y.push({node:C,editsRemaining:Z.editsRemaining-1,str:z+Z.str.slice(2)})}}return X},Q.TokenSet.fromString=function(G){var U=new Q.TokenSet,X=U;for(var Y=0,Z=G.length;Y<Z;Y++){var $=G[Y],A=Y==Z-1;if($=="*")U.edges[$]=U,U.final=A;else{var O=new Q.TokenSet;O.final=A,U.edges[$]=O,U=O}}return X},Q.TokenSet.prototype.toArray=function(){var G=[],U=[{prefix:"",node:this}];while(U.length){var X=U.pop(),Y=Object.keys(X.node.edges),Z=Y.length;if(X.node.final)X.prefix.charAt(0),G.push(X.prefix);for(var $=0;$<Z;$++){var A=Y[$];U.push({prefix:X.prefix.concat(A),node:X.node.edges[A]})}}return G},Q.TokenSet.prototype.toString=function(){if(this._str)return this._str;var G=this.final?"1":"0",U=Object.keys(this.edges).sort(),X=U.length;for(var Y=0;Y<X;Y++){var Z=U[Y],$=this.edges[Z];G=G+Z+$.id}return G},Q.TokenSet.prototype.intersect=function(G){var U=new Q.TokenSet,X=void 0,Y=[{qNode:G,output:U,node:this}];while(Y.length){X=Y.pop();var Z=Object.keys(X.qNode.edges),$=Z.length,A=Object.keys(X.node.edges),O=A.length;for(var J=0;J<$;J++){var z=Z[J];for(var D=0;D<O;D++){var C=A[D];if(C==z||z=="*"){var T=X.node.edges[C],P=X.qNode.edges[z],F=T.final&&P.final,W=void 0;if(C in X.output.edges)W=X.output.edges[C],W.final=W.final||F;else W=new Q.TokenSet,W.final=F,X.output.edges[C]=W;Y.push({qNode:P,output:W,node:T})}}}}return U},Q.TokenSet.Builder=function(){this.previousWord="",this.root=new Q.TokenSet,this.uncheckedNodes=[],this.minimizedNodes={}},Q.TokenSet.Builder.prototype.insert=function(G){var U,X=0;if(G<this.previousWord)throw new Error("Out of order word insertion");for(var Y=0;Y<G.length&&Y<this.previousWord.length;Y++){if(G[Y]!=this.previousWord[Y])break;X++}if(this.minimize(X),this.uncheckedNodes.length==0)U=this.root;else U=this.uncheckedNodes[this.uncheckedNodes.length-1].child;for(var Y=X;Y<G.length;Y++){var Z=new Q.TokenSet,$=G[Y];U.edges[$]=Z,this.uncheckedNodes.push({parent:U,char:$,child:Z}),U=Z}U.final=!0,this.previousWord=G},Q.TokenSet.Builder.prototype.finish=function(){this.minimize(0)},Q.TokenSet.Builder.prototype.minimize=function(G){for(var U=this.uncheckedNodes.length-1;U>=G;U--){var X=this.uncheckedNodes[U],Y=X.child.toString();if(Y in this.minimizedNodes)X.parent.edges[X.char]=this.minimizedNodes[Y];else X.child._str=Y,this.minimizedNodes[Y]=X.child;this.uncheckedNodes.pop()}};/*!
   * lunr.Index
   * Copyright (C) 2020 Oliver Nightingale
   */Q.Index=function(G){this.invertedIndex=G.invertedIndex,this.fieldVectors=G.fieldVectors,this.tokenSet=G.tokenSet,this.fields=G.fields,this.pipeline=G.pipeline},Q.Index.prototype.search=function(G){return this.query(function(U){var X=new Q.QueryParser(G,U);X.parse()})},Q.Index.prototype.query=function(G){var U=new Q.Query(this.fields),X=Object.create(null),Y=Object.create(null),Z=Object.create(null),$=Object.create(null),A=Object.create(null);for(var O=0;O<this.fields.length;O++)Y[this.fields[O]]=new Q.Vector;G.call(U,U);for(var O=0;O<U.clauses.length;O++){var J=U.clauses[O],z=null,D=Q.Set.empty;if(J.usePipeline)z=this.pipeline.runString(J.term,{fields:J.fields});else z=[J.term];for(var C=0;C<z.length;C++){var T=z[C];J.term=T;var P=Q.TokenSet.fromClause(J),F=this.tokenSet.intersect(P).toArray();if(F.length===0&&J.presence===Q.Query.presence.REQUIRED){for(var W=0;W<J.fields.length;W++){var K=J.fields[W];$[K]=Q.Set.empty}break}for(var L=0;L<F.length;L++){var v=F[L],j=this.invertedIndex[v],R=j._index;for(var W=0;W<J.fields.length;W++){var K=J.fields[W],g=j[K],b=Object.keys(g),p=v+"/"+K,h=new Q.Set(b);if(J.presence==Q.Query.presence.REQUIRED){if(D=D.union(h),$[K]===void 0)$[K]=Q.Set.complete}if(J.presence==Q.Query.presence.PROHIBITED){if(A[K]===void 0)A[K]=Q.Set.empty;A[K]=A[K].union(h);continue}if(Y[K].upsert(R,J.boost,function(t,r){return t+r}),Z[p])continue;for(var k=0;k<b.length;k++){var x=b[k],q=new Q.FieldRef(x,K),c=g[x],f;if((f=X[q])===void 0)X[q]=new Q.MatchData(v,K,c);else f.add(v,K,c)}Z[p]=!0}}}if(J.presence===Q.Query.presence.REQUIRED)for(var W=0;W<J.fields.length;W++){var K=J.fields[W];$[K]=$[K].intersect(D)}}var w=Q.Set.complete,N=Q.Set.empty;for(var O=0;O<this.fields.length;O++){var K=this.fields[O];if($[K])w=w.intersect($[K]);if(A[K])N=N.union(A[K])}var H=Object.keys(X),S=[],E=Object.create(null);if(U.isNegated()){H=Object.keys(this.fieldVectors);for(var O=0;O<H.length;O++){var q=H[O],I=Q.FieldRef.fromString(q);X[q]=new Q.MatchData}}for(var O=0;O<H.length;O++){var I=Q.FieldRef.fromString(H[O]),B=I.docRef;if(!w.contains(B))continue;if(N.contains(B))continue;var V=this.fieldVectors[I],M=Y[I.fieldName].similarity(V),y;if((y=E[B])!==void 0)y.score+=M,y.matchData.combine(X[I]);else{var _={ref:B,score:M,matchData:X[I]};E[B]=_,S.push(_)}}return S.sort(function(n,l){return l.score-n.score})},Q.Index.prototype.toJSON=function(){var G=Object.keys(this.invertedIndex).sort().map(function(X){return[X,this.invertedIndex[X]]},this),U=Object.keys(this.fieldVectors).map(function(X){return[X,this.fieldVectors[X].toJSON()]},this);return{version:Q.version,fields:this.fields,fieldVectors:U,invertedIndex:G,pipeline:this.pipeline.toJSON()}},Q.Index.load=function(G){var U={},X={},Y=G.fieldVectors,Z=Object.create(null),$=G.invertedIndex,A=new Q.TokenSet.Builder,O=Q.Pipeline.load(G.pipeline);if(G.version!=Q.version)Q.utils.warn("Version mismatch when loading serialised index. Current version of lunr '"+Q.version+"' does not match serialized index '"+G.version+"'");for(var J=0;J<Y.length;J++){var z=Y[J],D=z[0],C=z[1];X[D]=new Q.Vector(C)}for(var J=0;J<$.length;J++){var z=$[J],T=z[0],P=z[1];A.insert(T),Z[T]=P}return A.finish(),U.fields=G.fields,U.fieldVectors=X,U.invertedIndex=Z,U.tokenSet=A.root,U.pipeline=O,new Q.Index(U)};/*!
   * lunr.Builder
   * Copyright (C) 2020 Oliver Nightingale
   */Q.Builder=function(){this._ref="id",this._fields=Object.create(null),this._documents=Object.create(null),this.invertedIndex=Object.create(null),this.fieldTermFrequencies={},this.fieldLengths={},this.tokenizer=Q.tokenizer,this.pipeline=new Q.Pipeline,this.searchPipeline=new Q.Pipeline,this.documentCount=0,this._b=0.75,this._k1=1.2,this.termIndex=0,this.metadataWhitelist=[]},Q.Builder.prototype.ref=function(G){this._ref=G},Q.Builder.prototype.field=function(G,U){if(/\//.test(G))throw new RangeError("Field '"+G+"' contains illegal character '/'");this._fields[G]=U||{}},Q.Builder.prototype.b=function(G){if(G<0)this._b=0;else if(G>1)this._b=1;else this._b=G},Q.Builder.prototype.k1=function(G){this._k1=G},Q.Builder.prototype.add=function(G,U){var X=G[this._ref],Y=Object.keys(this._fields);this._documents[X]=U||{},this.documentCount+=1;for(var Z=0;Z<Y.length;Z++){var $=Y[Z],A=this._fields[$].extractor,O=A?A(G):G[$],J=this.tokenizer(O,{fields:[$]}),z=this.pipeline.run(J),D=new Q.FieldRef(X,$),C=Object.create(null);this.fieldTermFrequencies[D]=C,this.fieldLengths[D]=0,this.fieldLengths[D]+=z.length;for(var T=0;T<z.length;T++){var P=z[T];if(C[P]==null)C[P]=0;if(C[P]+=1,this.invertedIndex[P]==null){var F=Object.create(null);F._index=this.termIndex,this.termIndex+=1;for(var W=0;W<Y.length;W++)F[Y[W]]=Object.create(null);this.invertedIndex[P]=F}if(this.invertedIndex[P][$][X]==null)this.invertedIndex[P][$][X]=Object.create(null);for(var K=0;K<this.metadataWhitelist.length;K++){var L=this.metadataWhitelist[K],v=P.metadata[L];if(this.invertedIndex[P][$][X][L]==null)this.invertedIndex[P][$][X][L]=[];this.invertedIndex[P][$][X][L].push(v)}}}},Q.Builder.prototype.calculateAverageFieldLengths=function(){var G=Object.keys(this.fieldLengths),U=G.length,X={},Y={};for(var Z=0;Z<U;Z++){var $=Q.FieldRef.fromString(G[Z]),A=$.fieldName;Y[A]||(Y[A]=0),Y[A]+=1,X[A]||(X[A]=0),X[A]+=this.fieldLengths[$]}var O=Object.keys(this._fields);for(var Z=0;Z<O.length;Z++){var J=O[Z];X[J]=X[J]/Y[J]}this.averageFieldLength=X},Q.Builder.prototype.createFieldVectors=function(){var G={},U=Object.keys(this.fieldTermFrequencies),X=U.length,Y=Object.create(null);for(var Z=0;Z<X;Z++){var $=Q.FieldRef.fromString(U[Z]),A=$.fieldName,O=this.fieldLengths[$],J=new Q.Vector,z=this.fieldTermFrequencies[$],D=Object.keys(z),C=D.length,T=this._fields[A].boost||1,P=this._documents[$.docRef].boost||1;for(var F=0;F<C;F++){var W=D[F],K=z[W],L=this.invertedIndex[W]._index,v,j,R;if(Y[W]===void 0)v=Q.idf(this.invertedIndex[W],this.documentCount),Y[W]=v;else v=Y[W];j=v*((this._k1+1)*K)/(this._k1*(1-this._b+this._b*(O/this.averageFieldLength[A]))+K),j*=T,j*=P,R=Math.round(j*1000)/1000,J.insert(L,R)}G[$]=J}this.fieldVectors=G},Q.Builder.prototype.createTokenSet=function(){this.tokenSet=Q.TokenSet.fromArray(Object.keys(this.invertedIndex).sort())},Q.Builder.prototype.build=function(){return this.calculateAverageFieldLengths(),this.createFieldVectors(),this.createTokenSet(),new Q.Index({invertedIndex:this.invertedIndex,fieldVectors:this.fieldVectors,tokenSet:this.tokenSet,fields:Object.keys(this._fields),pipeline:this.searchPipeline})},Q.Builder.prototype.use=function(G){var U=Array.prototype.slice.call(arguments,1);U.unshift(this),G.apply(this,U)},Q.MatchData=function(G,U,X){var Y=Object.create(null),Z=Object.keys(X||{});for(var $=0;$<Z.length;$++){var A=Z[$];Y[A]=X[A].slice()}if(this.metadata=Object.create(null),G!==void 0)this.metadata[G]=Object.create(null),this.metadata[G][U]=Y},Q.MatchData.prototype.combine=function(G){var U=Object.keys(G.metadata);for(var X=0;X<U.length;X++){var Y=U[X],Z=Object.keys(G.metadata[Y]);if(this.metadata[Y]==null)this.metadata[Y]=Object.create(null);for(var $=0;$<Z.length;$++){var A=Z[$],O=Object.keys(G.metadata[Y][A]);if(this.metadata[Y][A]==null)this.metadata[Y][A]=Object.create(null);for(var J=0;J<O.length;J++){var z=O[J];if(this.metadata[Y][A][z]==null)this.metadata[Y][A][z]=G.metadata[Y][A][z];else this.metadata[Y][A][z]=this.metadata[Y][A][z].concat(G.metadata[Y][A][z])}}}},Q.MatchData.prototype.add=function(G,U,X){if(!(G in this.metadata)){this.metadata[G]=Object.create(null),this.metadata[G][U]=X;return}if(!(U in this.metadata[G])){this.metadata[G][U]=X;return}var Y=Object.keys(X);for(var Z=0;Z<Y.length;Z++){var $=Y[Z];if($ in this.metadata[G][U])this.metadata[G][U][$]=this.metadata[G][U][$].concat(X[$]);else this.metadata[G][U][$]=X[$]}},Q.Query=function(G){this.clauses=[],this.allFields=G},Q.Query.wildcard=new String("*"),Q.Query.wildcard.NONE=0,Q.Query.wildcard.LEADING=1,Q.Query.wildcard.TRAILING=2,Q.Query.presence={OPTIONAL:1,REQUIRED:2,PROHIBITED:3},Q.Query.prototype.clause=function(G){if(!("fields"in G))G.fields=this.allFields;if(!("boost"in G))G.boost=1;if(!("usePipeline"in G))G.usePipeline=!0;if(!("wildcard"in G))G.wildcard=Q.Query.wildcard.NONE;if(G.wildcard&Q.Query.wildcard.LEADING&&G.term.charAt(0)!=Q.Query.wildcard)G.term="*"+G.term;if(G.wildcard&Q.Query.wildcard.TRAILING&&G.term.slice(-1)!=Q.Query.wildcard)G.term=""+G.term+"*";if(!("presence"in G))G.presence=Q.Query.presence.OPTIONAL;return this.clauses.push(G),this},Q.Query.prototype.isNegated=function(){for(var G=0;G<this.clauses.length;G++)if(this.clauses[G].presence!=Q.Query.presence.PROHIBITED)return!1;return!0},Q.Query.prototype.term=function(G,U){if(Array.isArray(G))return G.forEach(function(Y){this.term(Y,Q.utils.clone(U))},this),this;var X=U||{};return X.term=G.toString(),this.clause(X),this},Q.QueryParseError=function(G,U,X){this.name="QueryParseError",this.message=G,this.start=U,this.end=X},Q.QueryParseError.prototype=new Error,Q.QueryLexer=function(G){this.lexemes=[],this.str=G,this.length=G.length,this.pos=0,this.start=0,this.escapeCharPositions=[]},Q.QueryLexer.prototype.run=function(){var G=Q.QueryLexer.lexText;while(G)G=G(this)},Q.QueryLexer.prototype.sliceString=function(){var G=[],U=this.start,X=this.pos;for(var Y=0;Y<this.escapeCharPositions.length;Y++)X=this.escapeCharPositions[Y],G.push(this.str.slice(U,X)),U=X+1;return G.push(this.str.slice(U,this.pos)),this.escapeCharPositions.length=0,G.join("")},Q.QueryLexer.prototype.emit=function(G){this.lexemes.push({type:G,str:this.sliceString(),start:this.start,end:this.pos}),this.start=this.pos},Q.QueryLexer.prototype.escapeCharacter=function(){this.escapeCharPositions.push(this.pos-1),this.pos+=1},Q.QueryLexer.prototype.next=function(){if(this.pos>=this.length)return Q.QueryLexer.EOS;var G=this.str.charAt(this.pos);return this.pos+=1,G},Q.QueryLexer.prototype.width=function(){return this.pos-this.start},Q.QueryLexer.prototype.ignore=function(){if(this.start==this.pos)this.pos+=1;this.start=this.pos},Q.QueryLexer.prototype.backup=function(){this.pos-=1},Q.QueryLexer.prototype.acceptDigitRun=function(){var G,U;do G=this.next(),U=G.charCodeAt(0);while(U>47&&U<58);if(G!=Q.QueryLexer.EOS)this.backup()},Q.QueryLexer.prototype.more=function(){return this.pos<this.length},Q.QueryLexer.EOS="EOS",Q.QueryLexer.FIELD="FIELD",Q.QueryLexer.TERM="TERM",Q.QueryLexer.EDIT_DISTANCE="EDIT_DISTANCE",Q.QueryLexer.BOOST="BOOST",Q.QueryLexer.PRESENCE="PRESENCE",Q.QueryLexer.lexField=function(G){return G.backup(),G.emit(Q.QueryLexer.FIELD),G.ignore(),Q.QueryLexer.lexText},Q.QueryLexer.lexTerm=function(G){if(G.width()>1)G.backup(),G.emit(Q.QueryLexer.TERM);if(G.ignore(),G.more())return Q.QueryLexer.lexText},Q.QueryLexer.lexEditDistance=function(G){return G.ignore(),G.acceptDigitRun(),G.emit(Q.QueryLexer.EDIT_DISTANCE),Q.QueryLexer.lexText},Q.QueryLexer.lexBoost=function(G){return G.ignore(),G.acceptDigitRun(),G.emit(Q.QueryLexer.BOOST),Q.QueryLexer.lexText},Q.QueryLexer.lexEOS=function(G){if(G.width()>0)G.emit(Q.QueryLexer.TERM)},Q.QueryLexer.termSeparator=Q.tokenizer.separator,Q.QueryLexer.lexText=function(G){while(!0){var U=G.next();if(U==Q.QueryLexer.EOS)return Q.QueryLexer.lexEOS;if(U.charCodeAt(0)==92){G.escapeCharacter();continue}if(U==":")return Q.QueryLexer.lexField;if(U=="~"){if(G.backup(),G.width()>0)G.emit(Q.QueryLexer.TERM);return Q.QueryLexer.lexEditDistance}if(U=="^"){if(G.backup(),G.width()>0)G.emit(Q.QueryLexer.TERM);return Q.QueryLexer.lexBoost}if(U=="+"&&G.width()===1)return G.emit(Q.QueryLexer.PRESENCE),Q.QueryLexer.lexText;if(U=="-"&&G.width()===1)return G.emit(Q.QueryLexer.PRESENCE),Q.QueryLexer.lexText;if(U.match(Q.QueryLexer.termSeparator))return Q.QueryLexer.lexTerm}},Q.QueryParser=function(G,U){this.lexer=new Q.QueryLexer(G),this.query=U,this.currentClause={},this.lexemeIdx=0},Q.QueryParser.prototype.parse=function(){this.lexer.run(),this.lexemes=this.lexer.lexemes;var G=Q.QueryParser.parseClause;while(G)G=G(this);return this.query},Q.QueryParser.prototype.peekLexeme=function(){return this.lexemes[this.lexemeIdx]},Q.QueryParser.prototype.consumeLexeme=function(){var G=this.peekLexeme();return this.lexemeIdx+=1,G},Q.QueryParser.prototype.nextClause=function(){var G=this.currentClause;this.query.clause(G),this.currentClause={}},Q.QueryParser.parseClause=function(G){var U=G.peekLexeme();if(U==null)return;switch(U.type){case Q.QueryLexer.PRESENCE:return Q.QueryParser.parsePresence;case Q.QueryLexer.FIELD:return Q.QueryParser.parseField;case Q.QueryLexer.TERM:return Q.QueryParser.parseTerm;default:var X="expected either a field or a term, found "+U.type;if(U.str.length>=1)X+=" with value '"+U.str+"'";throw new Q.QueryParseError(X,U.start,U.end)}},Q.QueryParser.parsePresence=function(G){var U=G.consumeLexeme();if(U==null)return;switch(U.str){case"-":G.currentClause.presence=Q.Query.presence.PROHIBITED;break;case"+":G.currentClause.presence=Q.Query.presence.REQUIRED;break;default:var X="unrecognised presence operator'"+U.str+"'";throw new Q.QueryParseError(X,U.start,U.end)}var Y=G.peekLexeme();if(Y==null){var X="expecting term or field, found nothing";throw new Q.QueryParseError(X,U.start,U.end)}switch(Y.type){case Q.QueryLexer.FIELD:return Q.QueryParser.parseField;case Q.QueryLexer.TERM:return Q.QueryParser.parseTerm;default:var X="expecting term or field, found '"+Y.type+"'";throw new Q.QueryParseError(X,Y.start,Y.end)}},Q.QueryParser.parseField=function(G){var U=G.consumeLexeme();if(U==null)return;if(G.query.allFields.indexOf(U.str)==-1){var X=G.query.allFields.map(function($){return"'"+$+"'"}).join(", "),Y="unrecognised field '"+U.str+"', possible fields: "+X;throw new Q.QueryParseError(Y,U.start,U.end)}G.currentClause.fields=[U.str];var Z=G.peekLexeme();if(Z==null){var Y="expecting term, found nothing";throw new Q.QueryParseError(Y,U.start,U.end)}switch(Z.type){case Q.QueryLexer.TERM:return Q.QueryParser.parseTerm;default:var Y="expecting term, found '"+Z.type+"'";throw new Q.QueryParseError(Y,Z.start,Z.end)}},Q.QueryParser.parseTerm=function(G){var U=G.consumeLexeme();if(U==null)return;if(G.currentClause.term=U.str.toLowerCase(),U.str.indexOf("*")!=-1)G.currentClause.usePipeline=!1;var X=G.peekLexeme();if(X==null){G.nextClause();return}switch(X.type){case Q.QueryLexer.TERM:return G.nextClause(),Q.QueryParser.parseTerm;case Q.QueryLexer.FIELD:return G.nextClause(),Q.QueryParser.parseField;case Q.QueryLexer.EDIT_DISTANCE:return Q.QueryParser.parseEditDistance;case Q.QueryLexer.BOOST:return Q.QueryParser.parseBoost;case Q.QueryLexer.PRESENCE:return G.nextClause(),Q.QueryParser.parsePresence;default:var Y="Unexpected lexeme type '"+X.type+"'";throw new Q.QueryParseError(Y,X.start,X.end)}},Q.QueryParser.parseEditDistance=function(G){var U=G.consumeLexeme();if(U==null)return;var X=parseInt(U.str,10);if(isNaN(X)){var Y="edit distance must be numeric";throw new Q.QueryParseError(Y,U.start,U.end)}G.currentClause.editDistance=X;var Z=G.peekLexeme();if(Z==null){G.nextClause();return}switch(Z.type){case Q.QueryLexer.TERM:return G.nextClause(),Q.QueryParser.parseTerm;case Q.QueryLexer.FIELD:return G.nextClause(),Q.QueryParser.parseField;case Q.QueryLexer.EDIT_DISTANCE:return Q.QueryParser.parseEditDistance;case Q.QueryLexer.BOOST:return Q.QueryParser.parseBoost;case Q.QueryLexer.PRESENCE:return G.nextClause(),Q.QueryParser.parsePresence;default:var Y="Unexpected lexeme type '"+Z.type+"'";throw new Q.QueryParseError(Y,Z.start,Z.end)}},Q.QueryParser.parseBoost=function(G){var U=G.consumeLexeme();if(U==null)return;var X=parseInt(U.str,10);if(isNaN(X)){var Y="boost must be numeric";throw new Q.QueryParseError(Y,U.start,U.end)}G.currentClause.boost=X;var Z=G.peekLexeme();if(Z==null){G.nextClause();return}switch(Z.type){case Q.QueryLexer.TERM:return G.nextClause(),Q.QueryParser.parseTerm;case Q.QueryLexer.FIELD:return G.nextClause(),Q.QueryParser.parseField;case Q.QueryLexer.EDIT_DISTANCE:return Q.QueryParser.parseEditDistance;case Q.QueryLexer.BOOST:return Q.QueryParser.parseBoost;case Q.QueryLexer.PRESENCE:return G.nextClause(),Q.QueryParser.parsePresence;default:var Y="Unexpected lexeme type '"+Z.type+"'";throw new Q.QueryParseError(Y,Z.start,Z.end)}},function(G,U){if(typeof define==="function"&&define.amd)define(U);else if(typeof u==="object")d.exports=U();else G.lunr=U()}(this,function(){return Q})})()});var o=XG(s(),1);function ZG(Q,G,U,X){if(!U.trim().length){X.innerHTML='<div class="DJSearchResults_Empty m-noquery">Type a search into the box.</div>';return}const Y=G.query(function(Z){Z.term(U,{boost:100,usePipeline:!0}),Z.term(U,{boost:10,usePipeline:!1,wildcard:o.default.Query.wildcard.TRAILING}),Z.term(U,{boost:1,editDistance:1})});if(!Y.length){X.innerHTML='<div class="DJSearchResults_Empty m-noresults">No results found.</div>';return}X.innerHTML=Y.map((Z)=>$G(Z,Q[Z.ref])).join("\n")}function $G(Q,G){const U=Q.matchData.metadata;return`
  <a class="DJSearchResult" tabindex="0" href="${G.url}">
    <h1>${i(G.name,"name",U,!1)}</h1>
    <div class="DJSearchResult_Text">${i(G.text,"text",U,!0)}</div>
  </div>`}function i(Q,G,U,X){const Y=new Array;let Z=new Array;for(let O of Object.values(U)){if(!O[G])continue;Z=Z.concat(O[G].position)}Z.sort((O,J)=>O[0]-J[0]);let $=0;function A(){if($>=Q.length)return null;const O=Q.indexOf("\n",$),J=$;let z="";if(O>=0)z=Q.slice($,O),$=O+1;else z=Q.slice($),$=Q.length;return{startInclusive:J,endExclusive:$,text:z}}if(X){let O=A();while(O){const J=Z.filter((z)=>z[0]>=O.startInclusive&&z[0]<O.endExclusive);if(J.length)Y.push(`<p>${a(O,J)}`);O=A()}}else Y.push(a({startInclusive:0,endExclusive:Q.length,text:Q},Z));return Y.join("\n")}function a(Q,G){const U=new Array;let X=0;for(let[Y,Z]of G){const $=Y-Q.startInclusive;if($>X)U.push(Q.text.slice(X,$));U.push("<mark>"),U.push(Q.text.slice($,$+Z)),U.push("</mark>"),X=$+Z}if(X<Q.text.length)U.push(Q.text.slice(X));if(!U.length)return"";return U.join("")}window.addEventListener("dj-onload",()=>{const Q=document.querySelector("#dj-search-input");if(!Q)return;const G=document.querySelector("#dj-search-menu-results");if(!G)return;const U=document.querySelector("#dj-search-menu");if(!U)return;document.querySelectorAll(".DJSearchMenu_FlexContainer").forEach((J)=>{J.addEventListener("click",(z)=>{if(z.target!==J)return;U.hidePopover()})});const X=window;if(!X.djSearchIndex){console.warn("Search index not found");return}const Y=X.djSearchIndex,Z={},$=o.default(function(){this.ref("url"),this.field("name"),this.field("text"),this.field("url"),this.metadataWhitelist=["position"];for(let J of Y)this.add(J),Z[J.url]=J});function A(J,z,D=!1,C){let T=null;return function(){let P=this,F=arguments,W=function(){if(T=null,!D)J.apply(P,F)},K=D&&!T;if(clearTimeout(T),T=setTimeout(W,z),C)C();if(K)J.apply(P,F)}}const O=A((J)=>{ZG(Z,$,J,G)},500);Q.addEventListener("input",(J)=>{O(J.target.value)}),document.querySelector(".DJOpenSearchButton").addEventListener("click",(J)=>{return J.preventDefault(),U.showPopover(),Q.focus(),!0}),window.addEventListener("keydown",(J)=>{if(U.matches(":popover-open"))return;if(J.key==="/")U.showPopover(),Q.focus(),J.preventDefault()}),window.addEventListener("keydown",(J)=>{if(J.key==="Escape")U.hidePopover()})});

//# debugId=D94A4ABCF1A4B16864756E2164756E21
//# sourceMappingURL=data:application/json;base64,
