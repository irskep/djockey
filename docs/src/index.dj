---
title: Overview
---
# Overview

Djockey is an experimental but powerful static site generator for technical writing and project documentation. The goal is to have the depth and extensibility of [Sphinx](https://www.sphinx-doc.org/en/master/) with the ease-of-use and built-in power of [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/).

- Write [Djot](https://djot.net) or [GitHub Flavored Markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)
- Output HTML or Markdown, so your docs are readable in the GitHub interface or on a nice web site
- Rich cross-references, checked at build time
- Tree-based pluginsâ€”stop writing Markdown tokenizer hacks!
- De-emphasizes client-side JS, has a small core and a few small dependencies

## Installation

You can invoke `djockey`{.language-sh} directly with `npx`{.language-sh} or `bunx`{.language-sh}.

{.tab-group}
:::

### Node

```sh
npx djockey path/to/docs
```

### Bun

```sh
bunx djockey path/to/docs
```

:::

or install it in your JS project and then run it:

{.tab-group}
:::

### Node

```sh
npm install djockey
npm exec -- djockey path/to/docs
```

### Bun

```sh
bun install djockey
bunx djockey path/to/docs
```

### `package.json`{.language-sh}

```json
{
  "scripts": {
    "docs": "djockey path/to/docs"
  }
}
```
:::

### Pandoc

In order to use Markdown, you must also [install Pandoc](https://pandoc.org/installing.html).

## Simple config file

Suppose your project layout looks something like this:

```plaintext
docs/
  index.djot
html_output/
```

To render `docs/`{.language-plaintext} into `html_output/`{.language-sh}, you would put a file in your repo root called `djockey.yaml` with these contents:

```yaml
input_dir: docs
output_dir:
  html: html_output
site_name: "Your Name Here"
url_root: https://where-docs-will-be-deployed
```

## Run Djockey

You can build your site for local-only viewing without a web server using file URLs like this:

```sh
npx djockey path-to-docs-directory --local
```

Or build for deployment on the web:

```sh
npx djockey path-to-docs-directory
```

## Markdown output

If you add an `output_dir.gfm`{.language-yaml} value to your `djockey.yaml`{.language-sh}, you can run Djockey with `-f gfm`{.language-sh} to get Markdown output.

```yaml
input_dir: docs
output_dir:
  html: html_output
  gfm: markdown_output
site_name: "Your Name Here"
url_root: https://where-docs-will-be-deployed
```

`npx djockey docs-input-dir -f gfm`{.language-sh}